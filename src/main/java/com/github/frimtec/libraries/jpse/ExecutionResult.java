package com.github.frimtec.libraries.jpse;

/**
 * Result of PowerShell execution.
 * <p>
 * This interface represents the outcome of executing a PowerShell command or script.
 * It provides access to the execution status, return code, standard output, and error output.
 * The execution is considered successful if the return code is 0.
 *
 * @see PowerShellExecutor
 */
public interface ExecutionResult {
    /**
     * Returns whether the PowerShell execution completed successfully.
     * <p>
     * In PowerShell, a return code of 0 indicates successful execution without errors.
     * Any other return code indicates that an error occurred during execution.
     *
     * @return true if the return code was 0 (successful execution), false otherwise
     */
    boolean isSuccess();

    /**
     * Returns the execution's return code.
     * <p>
     * In PowerShell, the return code (also known as exit code) indicates the status of the execution:
     * - 0: Successful execution without errors
     * - Non-zero: An error occurred during execution, with different values indicating different types of errors
     *
     * @return the PowerShell execution return code
     */
    int getReturnCode();

    /**
     * Returns the standard output (stdout) from the PowerShell execution.
     * <p>
     * This contains all the text that was written to the standard output stream during
     * the execution of the PowerShell command or script. This includes any output
     * generated by Write-Output, Write-Host, or simply values returned by the script.
     *
     * @return the standard output text as a string, may be empty if no output was generated
     */
    String getStandardOutput();

    /**
     * Returns the error output (stderr) from the PowerShell execution.
     * <p>
     * This contains all the text that was written to the error output stream during
     * the execution of the PowerShell command or script. This includes any output
     * generated by Write-Error, exceptions thrown during execution, or other error messages.
     * Even if error output is present, the execution might still be considered successful
     * based on the return code.
     *
     * @return the error output text as a string, may be empty if no errors occurred
     */
    String getErrorOutput();
}
